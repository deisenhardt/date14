#!/bin/ksh

#HELP00:           Script Name:  date14
#HELP01:               Purpose:  determine if invoice date is within 14 days prior to today
#HELP02:                 Owner:  David Eisenhardt
#HELP03:               License:  GPL v3
#HELP04:               Created:  28 Feb 2021
#HELP05:              Category:  lib, reference
#HELP06:            Input File:  stdin
#HELP07:           Output File:  return code
#HELP08:              Log path:  na
#HELP09:                Syntax:  date14 mm/dd/yyyy
#HELP10:               Example:  date14 06/06/2006
#HELP11:              Commands:  if/else/elif, case, awk, cut, printf
#HELP12:      Production Files:  na
#HELP13:    Ancillary Programs:  na
#HELP14:     Ancillary Scripts:  na
#HELP15:         Local Scripts:  no dependencies
#HELP16: crontask/systemd srvc:  na
#HELP17: task/service schedule:  na
#HELP18:        Kernel Version:  any
#HELP19:            DB Version:  na
#HELP20:            Audit Date:  
#HELP21:               Auditor:
#HELP22:       Approve Date(s):
#HELP23:           Approver(s):
#HELP24: Date Checked Into CVS:
#HELP25:   Checked Into CVS By:
#HELP26:               Version:  2.1
#HELP27:               Changes:  formatting
#HELP28:            Github url:  https://github.com/deisenhardt/date14/
#HELP29:
#HELP30:

##############################################################
# Version history ############################################
##############################################################

# v1.0 initial release
# v2.0 updated to using functions, cleaned up / readability
# v2.1 updated return to exit for better compatibility with bash

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# Exit codes !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# this script will:
# return 1 (false) if >14 days prior to today's date
# return 0 (true) if 14 or fewer days prior to today's date

##############################################################
# flow of script / notes / todo ##############################
##############################################################

# there are several commented, numbered echo that were for troubleshooting
# in case needed i chose to comment and leave them in place instead of delete

# calendar rules to consider
# 31 days in 01 03 05 07 08 10 12
# leap year divisible by 4; 29 days for 02
# 13th Jan latest day in the year would need to look at previous date

# as this script is meant to be called by others, and returns exit code only
# it has no usage/help output or flags

#{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}
# Define functions {}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}
#{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}

date_prep()
{
  today_y=$(date +%Y)
  today_m=$(date +%m)
  today_d=$(date +%d)
}

input_prep()
{
  # mm/dd/yyyy
  # 12/45/7---

  invdate_m=$(echo $1 | cut -c-2 )
  invdate_d=$(echo $1 | cut -c4-5 )
  invdate_y=$(echo $1 | cut -c7- )

  # make sure our input date is only numbers before we turn aritnmetic into algebra
  # expected input will be date in mm/dd/yyyy format

  # follows example within validate_store_nbr

  echo $invdate_m | egrep -q '^[0-9]{2}$'
  twodigitmonth=$?

  echo $invdate_d | egrep -q '^[0-9]{2}$'
  twodigitday=$?

  echo $invdate_y | egrep -q '^[0-9]{4}$'
  fourdigityear=$?

  #  $? = 0  found/pass
  #  $? = 1  missing/fail

  if [ "$twodigitmonth" -ne 0 ] || [ "$twodigitday" -ne 0 ] || [ "$fourdigityear" -ne 0 ]; then
    printf "\nInvalid date format, please use mm/dd/yyyy \n\n"
    exit 1
  fi

  # goal is to identify a greater than 14 day difference withsimple arithmetic
  # simplest start is if both invoices are the same year
  # initial comparisons
}

time_differences()
{
  diffyear=$(( "$today_y" - "$invdate_y" ))
  diffmonth=$(( "$today_m" - "$invdate_m" ))
  diffday=$(( "$today_d" - "$invdate_d" ))

  #now we rule out some obvious situations

  # more than one year difference, or more than one month difference, or if the year difference is in the future
  if [ "$diffyear" -gt 1 ] || [ "$diffmonth" -gt 1 ] || [ "$invdate_y" -gt "$today_y" ] ; then
    #echo "false 1"
    exit 1

  # more than 14 days within same month
  elif [ "$diffmonth" -eq 0 ] && [ "$diffday" -gt 14 ]; then
    #echo "false 2"
    exit 1

  # same year but month in the future (ie not a Dec/Jan situation)
  elif [ "$diffyear" -eq 0 ] && [  "$diffmonth" -lt 0 ]; then
    #echo "false 3"
    exit 1

  # same year and same month but day is in the future
  elif [ "$diffyear" -eq 0 ] && [ "$diffmonth" -eq 0 ] && [ "$diffday" -lt 0 ]; then
   #echo "false 4"
   exit 1

  fi
}

year_test()
{
  # now we need to know with different years is today later than 14 Jan?
  # or if invoice date is earlier than 18 Dec

  # looking at the months
  # if this month is not Jan OR invoice month is not Dec
  if [ "$today_m" -ne 1 ] || [ "$invdate_m" -ne 12 ]; then
    #echo "false 5"
    exit 1

  # now we can look at the days
  # Dec 18 is 14 days prior to Jan 1

  # with our difference in months, either of these being false negates
  elif [ "$today_d" -gt 13 ] || [ "$invdate_d" -lt 18]; then
    #echo "false 6"
    exit 1

  else
    #echo "true 1"
    exit 0

  fi
}

prev_month_feb()
{
  # if we are in Mar, it matters how many days in Feb
  # if year YYYY divisible by 4 is a whole number, then current year is leap year
  notleapyear=$(awk 'BEGIN {print "$invdate_y"/4}' | grep "\." )

  #testing if integer or floating point
  # will be null if a leap year, as dates will either be n or n.25 or n.5 or n.75
  if [ -n "$notleapyear" ]; then
    # non leap year
    ndays_feb=28

  else
    ndays_feb=29

  fi

  ndays=$(( "$today_d" + ( "$ndays_feb" -  "$invdate_d" ) ))

  if [ "$ndays" -gt 14 ]; then
    #echo "false 8"
    exit 1

  else
    #echo "true 2"
    exit 0

  fi
}

prev_month_30()

{
  ndays=$(( "$today_d" + ( 30 - "$invdate_d" ) ))

  if [ "$ndays" -gt 14 ]; then
    #echo "false 9"
    exit 1

  else
    #echo "true 3"
    exit 0

  fi
}

prev_month_31()
{
  ndays=$(( "$today_d" + ( 31 - "$invdate_d" ) ))

  if [ "$ndays" -gt 14 ]; then
    #echo "false 10"
    exit 1

  else
    #echo "true 4"
    exit 0

  fi
}

month_test()
{
  # 13th is the latest day that sale could be in previous month

  if [ "$today_d" -gt 13 ]; then
    #echo "false 7"
    exit 1

  else
    # now it matters how many days are in PREVIOUS month
    case $today_m in
      03)                prev_month_feb $@ ;;
      05|07|10|12)       prev_month_30 $@ ;;
      02|04|06|08|09|11) prev_month_31 $@ ;;
    esac
  fi
}

##############################################################
# main program ###############################################
##############################################################

date_prep

input_prep $@

time_differences $@

if [ "$diffyear" -eq 1 ]; then
  year_test $@
fi

if [ "$diffmonth" -eq 1 ]; then
  month_test $@
else
  # date should be within 14 days
  #echo "true 5"
  exit 0
fi

##############################################################
# End ########################################################
##############################################################
